#!/usr/bin/env python3

import os
import re
from swissknife import Shell as sh
from swissknife import Text as tx
from swissknife import Log
from swissknife import Snippets

# global structure for arguments
args = {}
log = Log(True)

def merge_binary_files(A, B, C):
    import shutil
    fout = open(C, 'wb')
    for n in [A, B]:
        if os.path.isfile(n):
            fin = file(n, 'rb')
            shutil.copyfileobj(fin, fout, 65536)
            fin.close()
        #---
    #---
    fout.close()
#---


def discover_audiobook_directory(dirname):
    fileset = {}
    fileset['all'] = []
    fileset['mp3'] = {}
    fileset['m4'] = {}
    fileset['jpg'] = {}
    fileset['txt'] = {}
    #---------------
    fileset['stats'] = {}
    fileset['stats']['channels'] = {}
    fileset['stats']['sampling'] = {}
    fileset['stats']['bitrate'] = {}

    fileset['info'] = {}
    tree = sh.dir_contains_dirs(dirname)
    fileset['info']['is_flat'] = ( 0 == len(tree) )

    fileset['all'] = sh.find_files('*.*', dirname)

    total_duration = 0
    total_size = 0
    file_list = sh.find_files('*.mp3', dirname)
    for name in file_list:
        res = sh.run('mp3info -r v -p "%%S,%%o,%%q,%%r\n" "%s"' % name, silent=True)
        if res['status'] == 0:
            tx.print(res,'','--- '+name)
            elements = re.split(',', res['stdout'][0])

            duration = int(elements[0])
            channels = elements[1]
            sampling = int(elements[2])
            if (elements[3]=='Variable'):
                bitrate  = 777
            else:
                bitrate  = int(elements[3])
            #---

            statinfo = os.stat(name)

            fileset['mp3'][name] = {}
            fileset['mp3'][name]['duration'] = duration
            fileset['mp3'][name]['channels'] = channels
            fileset['mp3'][name]['sampling'] = sampling
            fileset['mp3'][name]['bitrate']  = bitrate
            fileset['mp3'][name]['size'] = statinfo.st_size

            total_duration += duration
            total_size += statinfo.st_size

            Snippets.dict_increment(fileset['stats']['channels'], channels, 1)
            Snippets.dict_increment(fileset['stats']['sampling'], sampling, 1)
            Snippets.dict_increment(fileset['stats']['bitrate'], bitrate, 1)

        #---
    #---

    m4_file_list = sh.find_files('*.m4?', dirname)
    for name in m4_file_list:
        fileset['m4'][name] = {}
    #---

    txt_file_list = sh.find_files('*.txt', dirname)
    for name in txt_file_list:
        fileset['txt'][name] = {}
    #---

    jpg_file_list = sh.find_files('*.jpg', dirname)
    jpg_file_list.extend(sh.find_files('*.jpeg', dirname))
    jpg_file_list.extend(sh.find_files('*.JPG', dirname))
    jpg_file_list.extend(sh.find_files('*.JPEG', dirname))
    for name in jpg_file_list:
        fileset['jpg'][name] = {}
        statinfo = os.stat(name)
        fileset['jpg'][name]['size'] = statinfo.st_size
    #---

    fileset['info']['base_dir'] = dirname
    fileset['info']['total_duration'] = total_duration
    fileset['info']['total_files'] = len(fileset['mp3'])
    fileset['info']['total_size'] = total_size

    fileset['info']['channels_variations'] = len(fileset['stats']['channels'].keys())
    fileset['info']['sampling_variations'] = len(fileset['stats']['sampling'].keys())
    fileset['info']['bitrate_variations'] = len(fileset['stats']['bitrate'].keys())

    fileset['info']['total_variations'] =   fileset['info']['channels_variations'] + fileset['info']['sampling_variations'] + fileset['info']['bitrate_variations']
    fileset['info']['has_vbr'] =  'Variable' in fileset['stats']['bitrate'].keys()
    fileset['info']['is_64K'] =   (fileset['info']['bitrate_variations'] == 1) and (64 in fileset['stats']['bitrate'].keys())
    fileset['info']['has_images'] = (len(fileset['jpg']) > 0)

    #if args['debug']:
    #    tx.print(fileset)
    #---
    return fileset
#---


def recode_m4(job):
    if len(job['m4']) == 0:
        return job
    #---
    tdir = sh.makedir('ab_', True)
    ffmpeg_params = ' -acodec libmp3lame -ar 22050 '
    idx = 1
    for name in job['m4']:
        newname = tdir + '/' + "%04d.mp3" % idx
        cmd = 'ffmpeg -i ' + tx.enquote(name) + ffmpeg_params + tx.enquote(newname)
        sh.run(cmd)



def merge_mp3_files(xdr):
    merge_name = tx.randomstr(8)
    phase_one = merge_name + '_copy' + '.mp3'
    phase_two = merge_name + '_recoded' + '.mp3'
    sh.merge(xdr['mp3'].keys(), phase_one)
    statinfo = os.stat(phase_one)
    log.print('Created file %s with size %d bytes' % (phase_one, statinfo.st_size))
    log.print('Recoding')
    cmd = "ffmpeg -i \"%s\" -acodec libmp3lame -ar 22050 \"%s\"" % (phase_one, phase_two)
    res = sh.run(cmd)
    if res['status'] != 0:
        return res['status']
    #---
    res = sh.run('mp3info -p "%%S\n" "%s"' % phase_two, silent=True)
    if res['status'] != 0:
        return res['status']
    #---
    duration = int(res['stdout'][0])
    print(duration)
    exit(0)





def process_audiobook_directory(params):
    log = Log(params['verbose'], params['debug'])
    for abdir in params['dirs']:
        xdr = discover_audiobook_directory(abdir)
        log.print('Processing directory %s' % abdir)
        if not xdr['info']['is_flat']:
            log.print('Flattening the directory')
            sh.flat_folder(abdir)
            xdr = discover_audiobook_directory(abdir)
            if not xdr['info']['is_flat']:
                log.print('Flattening was successful')
            #---
        #---
        log.print('Normalizing numeration')
        sh.normalize_names('*.*', abdir)
        sh.transliterate_folder(abdir)
        xdr = discover_audiobook_directory(abdir)
        tx.print(xdr)
        # if xdr['m4']:
        #    process m4a/m4b FileS
        #       cmd = "ffmpeg -i \"%s\" -acodec libmp3lame -ar 22050 \"%s\"" % (old,new)

        # if xdr['jpg']:
        #    process m4a/m4b FileS
        #       cmd = "ffmpeg -i \"%s\" -acodec libmp3lame -ar 22050 \"%s\"" % (old,new)


        if len(xdr['mp3']) > 1:
            merge_mp3_files(xdr)
            exit(0)
        #---

    #---
    if params['debug']:
        log.dump('merge-mp3.log')
    #---
#---


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("--verbose",action="store_true", default=False, help="Be verbose")
    parser.add_argument("--debug",  action="store_true", default=False)
    parser.add_argument("--dryrun", action="store_true", default=False)
    parser.add_argument("dirs", action="store", nargs='*')
    args = vars(parser.parse_args())
    if args['debug']:
        tx.print(args, '    ', 'Arguments')
    #---
    if args['dirs']:
        process_audiobook_directory(args)
    else:
        parser.parse_args(['--help'])
    #---
#---